<tokens>
<keyword> class </keyword>
<identifier> Memory </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> heapStart </identifier>
<symbol> , </symbol>
<identifier> heapEnd </identifier>
<symbol> , </symbol>
<identifier> heapLength </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> LinkedList </identifier>
<identifier> freeList </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> currentNullPointer </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heapStart </identifier>
<symbol> = </symbol>
<integerConstant> 2048 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heapEnd </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heapLength </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> heapEnd </identifier>
<symbol> - </symbol>
<identifier> heapStart </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> heapStart </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> heapLength </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> heapStart </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> peek </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> poke </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> Array </identifier>
<identifier> alloc </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> allocRecursion </identifier>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> , </symbol>
<identifier> heapStart </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> Array </identifier>
<identifier> allocRecursion </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> currentPointer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> blockSize </identifier>
<symbol> , </symbol>
<identifier> nextPointer </identifier>
<symbol> , </symbol>
<identifier> updateCutBlockSize </identifier>
<symbol> , </symbol>
<identifier> newPointer </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> block </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> blockSize </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> nextPointer </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> blockSize </identifier>
<symbol> &gt; </symbol>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> updateCutBlockSize </identifier>
<symbol> = </symbol>
<identifier> blockSize </identifier>
<symbol> - </symbol>
<identifier> size </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> updateCutBlockSize </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> = </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<identifier> updateCutBlockSize </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> [ </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> block </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> allocRecursion </identifier>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> , </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> defragmentation </identifier>
<symbol> ( </symbol>
<identifier> heapStart </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> block </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> defragmentation </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> currentPointer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> nextPointer </identifier>
<symbol> , </symbol>
<identifier> currentBlockSize </identifier>
<symbol> , </symbol>
<identifier> blocktogethersize </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentBlockSize </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> nextPointer </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> blocktogethersize </identifier>
<symbol> = </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<identifier> currentBlockSize </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> defragmentationCheck </identifier>
<symbol> ( </symbol>
<identifier> blocktogethersize </identifier>
<symbol> , </symbol>
<identifier> currentPointer </identifier>
<symbol> , </symbol>
<identifier> nextPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> defragmentation </identifier>
<symbol> ( </symbol>
<identifier> nextPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> defragmentationCheck </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> blocktogethersize </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> checkPointer </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> currentPointer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> nextPointer </identifier>
<symbol> , </symbol>
<identifier> currentBlockSize </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> checkBlockSize </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> nextPointer </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> blocktogethersize </identifier>
<symbol> = </symbol>
<identifier> currentPointer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> checkBlockSize </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> checkPointer </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentBlockSize </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> checkPointer </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> checkBlockSize </identifier>
<symbol> + </symbol>
<identifier> currentBlockSize </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> checkPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> defragmentationCheck </identifier>
<symbol> ( </symbol>
<identifier> blocktogethersize </identifier>
<symbol> , </symbol>
<identifier> checkPointer </identifier>
<symbol> , </symbol>
<identifier> nextPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> insert </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> currentPointer </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> segmentPointer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> nextPointer </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> nextPointer </identifier>
<symbol> = </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> insert </identifier>
<symbol> ( </symbol>
<identifier> nextPointer </identifier>
<symbol> , </symbol>
<identifier> segmentPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> currentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> segmentPointer </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> segmentPointer </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<identifier> Array </identifier>
<identifier> o </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> segmentPointer </identifier>
<symbol> , </symbol>
<identifier> segmentLength </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> segmentPointer </identifier>
<symbol> = </symbol>
<identifier> o </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> segmentLength </identifier>
<symbol> = </symbol>
<identifier> o </identifier>
<symbol> [ </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> insert </identifier>
<symbol> ( </symbol>
<identifier> heapStart </identifier>
<symbol> , </symbol>
<identifier> segmentPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
