<tokens>
<keyword> class </keyword>
<identifier> Screen </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> binaryScreen </identifier>
<symbol> , </symbol>
<identifier> binaryShifter </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> binaryScreenPointer </identifier>
<symbol> , </symbol>
<identifier> binaryShifterPointer </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> boolean </keyword>
<identifier> currentColor </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> screenStart </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> RAM </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> screenStart </identifier>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryScreen </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryShifter </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryScreenPointer </identifier>
<symbol> = </symbol>
<identifier> binaryScreen </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryShifterPointer </identifier>
<symbol> = </symbol>
<identifier> binaryShifter </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> start </identifier>
<symbol> , </symbol>
<identifier> finish </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> start </identifier>
<symbol> = </symbol>
<identifier> screenStart </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> finish </identifier>
<symbol> = </symbol>
<integerConstant> 24575 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> start </identifier>
<symbol> &lt; </symbol>
<identifier> finish </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<identifier> start </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> start </identifier>
<symbol> = </symbol>
<identifier> start </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> boolean </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> currentColor </identifier>
<symbol> = </symbol>
<symbol> ~ </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> mod </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> divededBy </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> remainder </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> remainder </identifier>
<symbol> = </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> remainder </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> divededBy </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> divededBy </identifier>
<symbol> = </symbol>
<identifier> remainder </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> remainder </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> remainder </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> remainder </identifier>
<symbol> = </symbol>
<identifier> remainder </identifier>
<symbol> - </symbol>
<identifier> divededBy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> remainder </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> power </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> k </identifier>
<symbol> , </symbol>
<identifier> total </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> total </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> k </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> k </identifier>
<symbol> &lt; </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> total </identifier>
<symbol> = </symbol>
<identifier> total </identifier>
<symbol> + </symbol>
<identifier> total </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> k </identifier>
<symbol> = </symbol>
<identifier> k </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> total </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> total </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> , </symbol>
<identifier> remainder </identifier>
<symbol> , </symbol>
<identifier> numberForBinaryOp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 32 </integerConstant>
<symbol> * </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<identifier> screenStart </identifier>
<symbol> + </symbol>
<identifier> address </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> remainder </identifier>
<symbol> = </symbol>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> numberForBinaryOp </identifier>
<symbol> = </symbol>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> power </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<identifier> remainder </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryShifterPointer </identifier>
<symbol> = </symbol>
<identifier> ConvertToBinary </identifier>
<symbol> . </symbol>
<identifier> convert </identifier>
<symbol> ( </symbol>
<identifier> numberForBinaryOp </identifier>
<symbol> , </symbol>
<identifier> binaryShifterPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> binaryScreenPointer </identifier>
<symbol> = </symbol>
<identifier> ConvertToBinary </identifier>
<symbol> . </symbol>
<identifier> convert </identifier>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> , </symbol>
<identifier> binaryScreenPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> bitwiseOR </identifier>
<symbol> ( </symbol>
<identifier> binaryShifterPointer </identifier>
<symbol> , </symbol>
<identifier> binaryScreenPointer </identifier>
<symbol> , </symbol>
<identifier> currentColor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> ConvertToBinary </identifier>
<symbol> . </symbol>
<identifier> binaryToInt </identifier>
<symbol> ( </symbol>
<identifier> binaryScreenPointer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> screenStart </identifier>
<symbol> + </symbol>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> printArray </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> PointerA </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> PointerA </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> bitwiseOR </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> pointerA </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> pointerB </identifier>
<symbol> , </symbol>
<keyword> boolean </keyword>
<identifier> currentColor </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> bitA </identifier>
<symbol> , </symbol>
<identifier> bitB </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bitA </identifier>
<symbol> = </symbol>
<identifier> pointerA </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bitB </identifier>
<symbol> = </symbol>
<identifier> pointerB </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> bitA </identifier>
<symbol> | </symbol>
<identifier> bitB </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pointerB </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentColor </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> bitA </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pointerB </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> tempX </identifier>
<symbol> , </symbol>
<identifier> tempY </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> switchleft </identifier>
<symbol> , </symbol>
<identifier> switchDown </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> xplusa </identifier>
<symbol> , </symbol>
<identifier> yplusb </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> diff </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> conditions </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> y2 </identifier>
<symbol> - </symbol>
<identifier> y1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> conditions </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> switchDown </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> switchleft </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tempX </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tempY </identifier>
<symbol> = </symbol>
<identifier> y1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> y2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<identifier> tempX </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y2 </identifier>
<symbol> = </symbol>
<identifier> tempY </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> switchleft </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> switchDown </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> conditions </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> y2 </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> conditions </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> dx </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> conditions </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> &lt; </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> &lt; </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> switchDown </identifier>
<symbol> | </symbol>
<identifier> switchleft </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> switchDown </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> - </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> - </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> diff </identifier>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> y2 </identifier>
<symbol> - </symbol>
<identifier> y1 </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> , </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> dx </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawCircle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> sideOfTriangle </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> insideSqrt </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> r </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> insideSqrt </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> r </identifier>
<symbol> , </symbol>
<identifier> r </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sideOfTriangle </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<identifier> insideSqrt </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<identifier> sideOfTriangle </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> sideOfTriangle </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
